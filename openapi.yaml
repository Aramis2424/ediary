openapi: 3.0.4
info:
  title: Swagger eDiary - OpenAPI 3.0
  description: |-
    Внешнее публичное API в идеологии REST в формате OpenAPI 3.0 проекта eDiary — сервиса личных электронных дневников. Сервис позполяет пользователю создавать и редактировать записи и отмечать свое настроение. Авторизация по JWT-токену.
  contact:
    email: srd2424@yandex.ru
  version: 1.0.0
  
servers:
  - url: https://ediary/api/v1
  
tags:
  - name: owner
    description: Operations about user
  - name: diary
    description: Everything about user`s diary
  - name: entry
    description: Access to entries
  - name: mood
    description: Access to moods

paths:
  /owners/:
    post:
      tags:
        - owner
      summary: Create user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerCreateDTO'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerInfoDTO'
        '409':
          description: Such user already exists
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /token/create:
    post:
      tags:
        - owner
      summary: Login user.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid login/password
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /owners/me:
    get:
      tags:
        - owner
      summary: Get current authenticated user
      description: Returns information about the currently authenticated owner using the provided JWT token.
      operationId: getCurrentOwner
      responses:
        '200':
          description: Successfully retrieved authenticated owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerInfoDTO'
        '401':
          description: Unauthorized — invalid or expired token
        '403':
          description: Forbidden — access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
                
  /owners/{ownerId}/diaries:
    get:
      tags:
        - diary
      summary: Get all owner`s diaries
      operationId: getDiaries
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of diaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiaryInfoDTO'
        '404':
          description: Owner not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /diaries/{diaryId}:
    get:
      tags:
        - diary
      summary: Get diary by id
      operationId: getDiary
      parameters:
        - name: diaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Diary with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryInfoDTO'
        '404':
          description: Diary not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    put:
      tags:
        - diary
      summary: Update diary by id
      operationId: updateDiary
      parameters:
        - name: diaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiaryUpdateDTO'
      responses:
        '200':
          description: Update diary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryInfoDTO'
        '404':
          description: Diary not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    delete:
      tags:
        - diary
      summary: Delete diary by id
      operationId: deleteDiary
      parameters:
        - name: diaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Diary successfully deleted
          content: {}
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /diaries:
    post:
      tags:
        - diary
      summary: Create diary
      operationId: createDiary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiaryCreateDTO'
      responses:
        '201':
          description: Created diary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryInfoDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
        
  /diaries/{diaryId}/entries:
    get:
      tags:
        - entry
      summary: Get all owner`s entries
      operationId: getEntries
      parameters:
        - name: diaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns all entries that belong to the specified diary.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryInfoDTO'
        '404':
          description: Diary not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /entries/{entryId}:
    get:
      tags:
        - entry
      summary: Get entry by id
      operationId: getEntry
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Entry with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryInfoDTO'
        '404':
          description: Entry not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    patch:
      tags:
        - entry
      summary: Update entry by id
      operationId: updateEntry
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryUpdateDTO'
      responses:
        '200':
          description: Updated entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryInfoDTO'
        '404':
          description: Diary not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    delete:
      tags:
        - entry
      summary: Delete entry by id
      operationId: deleteEntry
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Entry successfully deleted
          content: {}
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /entries:
    post:
      tags:
        - entry
      summary: Create entry for diary
      operationId: createEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryCreateDTO'
      responses:
        '201':
          description: Creates a new entry and assigns it to a diary.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryInfoDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /diaries/{diaryId}/entry-cards:
    get:
      tags:
        - entry
      summary: get entry cards representation
      parameters:
        - name: diaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns all entries entry cards that belong to the specified diary.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryCardDTO'
        '404':
          description: Diary not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /diaries/{diaryId}/can-create-entry:
    get:
      tags:
        - entry
      summary: get permission for creating entry
      parameters:
        - name: diaryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Returns permission if user can create new entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryPermissionRes'
        '404':
          description: Diary not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  
  /owners/{ownerId}/moods:
    get:
      tags:
        - mood
      summary: Get all owner`s moods
      operationId: getMoods
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns all moods that belong to the specified owner.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodInfoDTO'
        '404':
          description: Owner not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /moods/{moodId}:
    get:
      tags:
        - mood
      summary: Get mood by id
      operationId: getMood
      parameters:
        - name: moodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Mood with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodInfoDTO'
        '404':
          description: Mood not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    put:
      tags:
        - mood
      summary: Update mood by id
      operationId: updateMood
      parameters:
        - name: moodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoodUpdateDTO'
      responses:
        '200':
          description: Returns updated mood
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodInfoDTO'
        '404':
          description: Mood not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
    delete:
      tags:
        - mood
      summary: Delete mood by id
      operationId: deleteMood
      parameters:
        - name: moodId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Mood successfully deleted
          content: {}
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /moods:
    post:
      tags:
        - mood
      summary: Create mood for owner
      operationId: createMood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoodCreateDTO'
      responses:
        '201':
          description: Creates a new mood and assigns it to a owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoodInfoDTO'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []
  /moods/{ownerId}/can-create-mood:
    get:
      tags:
        - mood
      summary: get permission for creating entry
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Returns permission if user can create new mood
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodPermissionRes'
        '404':
          description: Owner not found
        '403':
          description: Access denied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerAuth: []

components:
  schemas:
    OwnerCreateDTO:
      type: object
      required: [name, birthDate, login, password]
      properties:
        name:
          type: string
          example: "Alice"
        birthDate:
          type: string
          format: date
          example: "1990-04-15"
        login:
          type: string
          example: "alice123"
        password:
          type: string
          format: password
          example: "securePassword"
    OwnerInfoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Alice"
        birthDate:
          type: string
          format: date
          example: "1990-04-15"
        login:
          type: string
          example: "alice123"
        createdDate:
          type: string
          format: date
          example: "2025-06-29"
          
    DiaryCreateDTO:
      type: object
      required: [ownerID, title]
      properties:
        ownerID:
          type: integer
          format: int64
          description: ID владельца дневника
          example: 1
        title:
          type: string
          example: "Мой дневник счастья"
        description:
          type: string
          example: "Записи о хорошем настроении и целях"
    DiaryUpdateDTO:
      type: object
      required: [title]
      properties:
        title:
          type: string
          example: "Обновлённый заголовок"
        description:
          type: string
          example: "Новое описание дневника"
    DiaryInfoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        title:
          type: string
          example: "Мой дневник счастья"
        description:
          type: string
          example: "Записи о хорошем настроении и целях"
        cntEntry:
          type: integer
          description: Количество записей в дневнике
          example: 12
        createdDate:
          type: string
          format: date
          example: "2025-06-29"
          
    EntryCardDTO:
      type: object
      properties:
        diaryId:
          type: integer
          format: int64
          example: 101
        entryId:
          type: integer
          format: int64
          example: 102
        title:
          type: string
          example: "Мой дневник счастья"
        scoreMood:
          type: integer
          minimum: 0
          maximum: 10
          example: 7
        scoreProductivity:
          type: integer
          minimum: 0
          maximum: 10
          example: 8
        createdDate:
          type: string
          format: date
          example: "2025-06-29"
    EntryPermissionRes:
      type: object
      properties:
        allowed:
          type: boolean
          example: true
          
    EntryCreateDTO:
      type: object
      required: [diaryID, title, content]
      properties:
        diaryID:
          type: integer
          format: int64
          description: ID дневника, к которому принадлежит запись
          example: 101
        title:
          type: string
          example: "Идея для проекта"
        content:
          type: string
          example: "Сегодня придумал интересную концепцию..."
    EntryUpdateDTO:
      type: object
      required: [title, content]
      properties:
        title:
          type: string
          example: "Обновлённая идея"
        content:
          type: string
          example: "Я передумал и решил улучшить концепцию..."
    EntryInfoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 501
        title:
          type: string
          example: "Идея для проекта"
        content:
          type: string
          example: "Сегодня придумал интересную концепцию..."
        createdDate:
          type: string
          format: date
          example: "2025-06-29"
          
    MoodCreateDTO:
      type: object
      required: [ownerID, scoreMood, scoreProductivity, bedtime, wakeUpTime]
      properties:
        ownerID:
          type: integer
          format: int64
          example: 1
        scoreMood:
          type: integer
          minimum: 0
          maximum: 10
          example: 7
        scoreProductivity:
          type: integer
          minimum: 0
          maximum: 10
          example: 8
        bedtime:
          type: string
          format: date-time
          example: "2025-06-28T23:00:00"
        wakeUpTime:
          type: string
          format: date-time
          example: "2025-06-29T07:00:00"
    MoodUpdateDTO:
      type: object
      required: [scoreMood, scoreProductivity, bedtime, wakeUpTime]
      properties:
        scoreMood:
          type: integer
          minimum: 0
          maximum: 10
          example: 6
        scoreProductivity:
          type: integer
          minimum: 0
          maximum: 10
          example: 7
        bedtime:
          type: string
          format: date-time
          example: "2025-06-28T22:30:00"
        wakeUpTime:
          type: string
          format: date-time
          example: "2025-06-29T06:45:00"
    MoodInfoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 200
        scoreMood:
          type: integer
          example: 7
        scoreProductivity:
          type: integer
          example: 8
        bedtime:
          type: string
          format: date-time
          example: "2025-06-28T23:00:00"
        wakeUpTime:
          type: string
          format: date-time
          example: "2025-06-29T07:00:00"
        createdAt:
          type: string
          format: date
          example: "2025-06-29"
    MoodPermissionRes:
      type: object
      properties:
        allowed:
          type: boolean
          example: true
          
    TokenRequest:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
          example: "user123"
        password:
          type: string
          format: password
          example: "mypassword"
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
              
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
 