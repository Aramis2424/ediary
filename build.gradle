plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'io.qameta.allure' version '2.11.2'
	id 'jacoco'
}

group = 'org.srd'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def allureVersion = "2.25.0"
def allurePath = "D:\\allure\\allure-2.32.0\\bin\\allure.bat"

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	implementation 'org.postgresql:postgresql'
	testImplementation 'com.h2database:h2'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
	testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

test {
	jvmArgs '-XX:+EnableDynamicAgentLoading'
	jvmArgs '-Xshare:off'
}

jacocoTestReport {
	dependsOn test
}

tasks.register('alreport') {
	group = 'Verification'
	description = 'Genarates and run allure report saving history'

	dependsOn copyAllureHistory
	doLast {
		exec {
			commandLine allurePath, 'generate', '--clean', "build/allure-results",
					'-o', "build/allure-report"
		}
		exec {
			commandLine allurePath, 'open', "build/allure-report"
		}
	}
}

tasks.register('copyAllureHistory') {
	doFirst {
		def reportDir = file("build/allure-report/history")
		def resultsDir = file("build/allure-results/history")
		if (reportDir.exists()) {
			copy {
				from reportDir
				into resultsDir
			}
		}
	}
}

tasks.withType(Test).configureEach {
	jvmArgs '-Dorg.aspectj.weaver.showWeaveInfo=false',
			'-Dorg.aspectj.weaver.avoidAjcoreFiles=true',
			'-Dorg.aspectj.weaver.Dump.exception=false'
}
